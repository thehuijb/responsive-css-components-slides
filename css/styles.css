@charset "UTF-8";
/*! normalize.css v2.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9.
 * Hide the `template` element in IE, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

@font-face {
  font-family: 'Ampersand';
  src: local("Baskerville-Italic"), local("GoudyOldStyleT-Italic"), local("Palatino-Italic"), local("Garamond-Italic");
  unicode-range: U+26; }

html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

h1,
h2,
h3,
h4,
h5,
h6,
ul,
li,
p,
blockquote {
  margin: 0;
  padding: 0; }

h1,
h2,
h3,
h4,
h5,
h6 {
  display: block; }

li {
  list-style: none; }

table td {
  border: 1px solid #fff; }

img {
  max-width: 100%;
  height: auto; }

.img--small {
  max-width: 55%;
  margin-left: auto;
  margin-right: auto; }

html {
  font-size: 100%;
  line-height: 1.4; }

html {
  font-family: "mr-eaves-xl-modern", sans-serif;
  font-weight: 300; }

h1, h2, h3, h4, h5, h6 {
  font-family: "Ampersand", "mr-eaves-xl-modern-narrow", sans-serif;
  font-weight: 700; }

h1 {
  font-size: 3.05176em;
  line-height: 1.05; }

h2 {
  font-size: 1.95312em;
  line-height: 1.2; }

h2 + ul {
  margin-top: 1.4em; }

h2 + *:not(h1) {
  margin-top: 0.7em; }

h3 {
  font-size: 1.25em;
  line-height: 1.25; }

h3 + ul {
  margin-top: 0.7em; }

ul + p {
  margin-top: 0.7em; }

blockquote {
  font-family: "mrs-eaves-xl-serif", serif;
  font-weight: 400;
  font-style: italic; }

.small {
  font-size: 0.8em;
  color: #999; }

code {
  font-size: 0.64em;
  line-height: 1.3;
  font-family: 'Hack', Consolas, 'Andale Mono', 'Courier New', monospace;
  background: rgba(0, 0, 0, 0.1);
  -moz-tab-size: 2;
    -o-tab-size: 2;
       tab-size: 2;
  padding: 0.0875em 0.175em; }

li > code {
  display: inline-block;
  vertical-align: middle; }

pre, style {
  border: 2px solid black; }

pre > code {
  font-size: 100%;
  line-height: 1.4;
  padding: 0.7em 0.7em;
  background: none; }

a {
  text-decoration: none;
  color: #2A7E6C; }
  a:hover, a:active, a:focus {
    color: #FABB00; }

.slide {
  padding: 4.16667% 4.16667% 8.33333%;
  background: #F0F1FF; }
  .slide img {
    display: block;
    margin-left: auto;
    margin-right: auto; }

.slide li {
  margin-left: 1.35em;
  list-style-type: square; }

.slide blockquote:before {
  position: fixed;
  top: -0.43em;
  letter-spacing: -0.09em;
  left: -0.1em;
  font-size: 40em;
  content: '‘‘';
  color: rgba(0, 0, 0, 0.18); }

.slide blockquote p {
  font-size: 1.25em;
  line-height: 1.25;
  text-align: center;
  max-width: 17.92em; }

.slide cite {
  display: block;
  margin-top: 0.21875em;
  font-size: 0.8em;
  color: rgba(0, 0, 0, 0.5);
  text-align: center; }

.slide--single-word {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-flow: column;
      flex-flow: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }

.slide--image {
  background-position: center center;
  background-size: cover; }

.slide--divider {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }
  .slide--divider h1 {
    text-align: center;
    max-width: 80%; }

.slide--exercise .slide__header {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-align: baseline;
      -ms-flex-align: baseline;
          align-items: baseline;
  background: -webkit-linear-gradient(currentColor, currentColor) no-repeat;
  background: linear-gradient(currentColor, currentColor) no-repeat;
  background-size: 100% 0.175em;
  background-position: 0 2.0em; }

.slide--exercise .slide__time {
  float: right; }

.slide--exercise .slide__content {
  margin-top: 1.05em; }

.intro .slide__header {
  text-shadow: 0.03em 0 #F0F1FF, -0.03em 0 #F0F1FF, 0.1em 0 #F0F1FF, -0.1em 0 #F0F1FF, 0.2em 0 #F0F1FF, -0.2em 0 #F0F1FF; }

.goodtype .slide__header {
  text-shadow: 0.03em 0 #0fbc66, -0.03em 0 #0fbc66, 0.1em 0 #0fbc66, -0.1em 0 #0fbc66, 0.2em 0 #0fbc66, -0.2em 0 #0fbc66; }

.typesetting .slide__header {
  text-shadow: 0.03em 0 #FABB00, -0.03em 0 #FABB00, 0.1em 0 #FABB00, -0.1em 0 #FABB00, 0.2em 0 #FABB00, -0.2em 0 #FABB00; }

.modular-scale .slide__header {
  text-shadow: 0.03em 0 #F269D9, -0.03em 0 #F269D9, 0.1em 0 #F269D9, -0.1em 0 #F269D9, 0.2em 0 #F269D9, -0.2em 0 #F269D9; }

.vertical-rhythm .slide__header {
  text-shadow: 0.03em 0 #292339, -0.03em 0 #292339, 0.1em 0 #292339, -0.1em 0 #292339, 0.2em 0 #292339, -0.2em 0 #292339; }

.msvr .slide__header {
  text-shadow: 0.03em 0 #345055, -0.03em 0 #345055, 0.1em 0 #345055, -0.1em 0 #345055, 0.2em 0 #345055, -0.2em 0 #345055; }

.break .slide__header {
  text-shadow: 0.03em 0 #111, -0.03em 0 #111, 0.1em 0 #111, -0.1em 0 #111, 0.2em 0 #111, -0.2em 0 #111; }

.rp .slide__header {
  text-shadow: 0.03em 0 #C6D5DC, -0.03em 0 #C6D5DC, 0.1em 0 #C6D5DC, -0.1em 0 #C6D5DC, 0.2em 0 #C6D5DC, -0.2em 0 #C6D5DC; }

.rms .slide__header {
  text-shadow: 0.03em 0 #8d97b9, -0.03em 0 #8d97b9, 0.1em 0 #8d97b9, -0.1em 0 #8d97b9, 0.2em 0 #8d97b9, -0.2em 0 #8d97b9; }

.rvr .slide__header {
  text-shadow: 0.03em 0 #CF9E6E, -0.03em 0 #CF9E6E, 0.1em 0 #CF9E6E, -0.1em 0 #CF9E6E, 0.2em 0 #CF9E6E, -0.2em 0 #CF9E6E; }

.auto .slide__header {
  text-shadow: 0.03em 0 #D05374, -0.03em 0 #D05374, 0.1em 0 #D05374, -0.1em 0 #D05374, 0.2em 0 #D05374, -0.2em 0 #D05374; }

.intro {
  background: #F0F1FF;
  color: #111; }

.goodtype {
  background: #0fbc66;
  color: #fff; }

.typesetting {
  background: #FABB00;
  color: #333; }

.modular-scale {
  background: #F269D9;
  color: #222; }

.vertical-rhythm {
  background: #292339;
  color: #fff; }

.msvr {
  background: #345055;
  color: #fff; }

.break {
  background: #111;
  color: #fff; }

.rp {
  background: #C6D5DC;
  color: #111; }

.rms {
  background: #8d97b9;
  color: #333; }

.rvr {
  background: #CF9E6E;
  color: #333; }

.auto {
  background: #D05374;
  color: #121212; }

.center {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center; }

.slide .book {
  display: inline-block;
  max-width: 9.1em; }

.book {
  -webkit-transform: rotate(-10deg);
          transform: rotate(-10deg); }

.book + .book {
  -webkit-transform: rotate(10deg);
          transform: rotate(10deg); }

.slide li {
  margin-left: 1.35em;
  list-style-type: square; }

.s-modular-demo {
  background: white;
  padding: 1.4em; }

.o-mod-demo {
  padding: 0.84746%; }

.o-mod-demo--content-sidebar:after {
  display: table;
  clear: both;
  content: ' '; }

.o-mod-demo--content-sidebar .o-content {
  width: 66.10169%;
  float: left;
  margin-right: 1.69492%; }

.o-mod-demo--content-sidebar .o-sidebar {
  width: 32.20339%;
  float: right;
  margin-right: 0; }

.o-mod-demo--three:after {
  display: table;
  clear: both;
  content: ' '; }

.o-mod-demo--three .o-item {
  width: 32.20339%;
  float: left; }
  .o-mod-demo--three .o-item:nth-child(3n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0; }
  .o-mod-demo--three .o-item:nth-child(3n + 2) {
    margin-left: 33.89831%;
    margin-right: -100%;
    clear: none; }
  .o-mod-demo--three .o-item:nth-child(3n + 3) {
    margin-left: 67.79661%;
    margin-right: -100%;
    clear: none; }

h2 + .s-modular-demo .c-demo {
  height: 6.3rem; }

.c-demo {
  position: relative;
  height: 7.7rem;
  border: 0.105em dashed #999;
  border-radius: 6px;
  -webkit-transition: background 0.3s ease-in-out;
  transition: background 0.3s ease-in-out; }
  .c-demo:before {
    display: block;
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    color: #999;
    -webkit-box-pack: center;
        -ms-flex-pack: center;
            justify-content: center;
    -webkit-box-align: center;
        -ms-flex-align: center;
            align-items: center;
    -webkit-transition: color 0.3s ease-in-out;
    transition: color 0.3s ease-in-out;
    content: attr(data-text);
    font-size: 0.8em; }

.c-demo.is-highlighted {
  border: 0.105em solid #ef7f39; }
  .c-demo.is-highlighted::before {
    background: #ef7f39;
    color: white; }

.s-component:after {
  display: table;
  clear: both;
  content: ' '; }

.s-component .component__title {
  font-size: 3.05176rem;
  line-height: 1.2; }

.s-component .component__body p {
  font-size: 1.5625rem;
  line-height: 1.3;
  margin-top: 1.05rem;
  max-width: 39.2rem; }

.s-component img {
  display: block;
  margin-left: 0;
  text-align: left; }

.s-modular-demo.has-highlighted-area-1 .c-demo[data-area="1"] {
  background: #ef7f39;
  border: none; }
  .s-modular-demo.has-highlighted-area-1 .c-demo[data-area="1"]:before {
    color: white; }

.s-modular-demo.has-highlighted-area-2 .c-demo[data-area="2"] {
  background: #ef7f39;
  border: none; }
  .s-modular-demo.has-highlighted-area-2 .c-demo[data-area="2"]:before {
    color: white; }

.s-modular-demo.has-highlighted-area-3 .c-demo[data-area="3"] {
  background: #ef7f39;
  border: none; }
  .s-modular-demo.has-highlighted-area-3 .c-demo[data-area="3"]:before {
    color: white; }

.component--scale1 {
  -webkit-animation: scale1 10s ease-in-out infinite;
          animation: scale1 10s ease-in-out infinite;
  -webkit-animation-play-state: paused;
          animation-play-state: paused; }

.slide:target .component--scale1 {
  -webkit-animation-play-state: running;
          animation-play-state: running; }

@-webkit-keyframes scale1 {
  0%, 100% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5); } }

@keyframes scale1 {
  0%, 100% {
    -webkit-transform: scale(1);
            transform: scale(1); }
  50% {
    -webkit-transform: scale(1.5);
            transform: scale(1.5); } }

.viewport {
  background: white;
  position: relative;
  border: 1px solid #c0bdc0;
  border-radius: 6px;
  box-shadow: 0 0 30px rgba(0, 0, 0, 0.2); }
  .viewport:before {
    display: block;
    height: 2.1rem;
    background: -webkit-linear-gradient(top, #f7f6f7, #f6f6f6);
    background: linear-gradient(to bottom, #f7f6f7, #f6f6f6);
    border-top-right-radius: 6px;
    border-top-left-radius: 6px;
    border-bottom: 1px solid #c0bdc0;
    content: ''; }

.viewport .viewport__buttons {
  top: 0.602rem;
  left: 0.7rem;
  background: #fc615d; }
  .viewport .viewport__buttons, .viewport .viewport__buttons::before, .viewport .viewport__buttons::after {
    position: absolute;
    width: 0.84rem;
    height: 0.84rem;
    border-radius: 100%;
    border: 1px solid #df4845; }
  .viewport .viewport__buttons::before, .viewport .viewport__buttons::after {
    display: inline-block;
    top: 0;
    content: ''; }
  .viewport .viewport__buttons::before {
    left: 1.4rem;
    background: #fdbc40;
    border-color: #dea034; }
  .viewport .viewport__buttons::after {
    left: 2.8rem;
    background: #34c84a;
    border-color: #28ab35; }

.viewport .s-component {
  padding: 1.4rem; }

.component--scale2 .component__title {
  font-size: 1.5625rem;
  line-height: 1.2; }

.component--scale2 .component__body p {
  font-size: 1.25rem;
  line-height: 1.3;
  max-width: 19.6rem; }

.component--scale2 img {
  display: block;
  margin-top: 1.05rem; }

.component--scale2.is-scaled .component__title {
  font-size: 3.05176rem;
  line-height: 1.2;
  margin-bottom: 0.7rem; }

.component--scale2.is-scaled .component__body p {
  float: right;
  font-size: 1.5625rem;
  line-height: 1.3;
  margin-top: 0;
  max-width: 39.2rem; }

.component--scale2.is-scaled img {
  margin-top: 0.49rem;
  margin-right: 1.4rem;
  margin-bottom: 4.2rem;
  float: left;
  max-width: 9.8rem; }

.s-demo-svg svg {
  width: 100%; }

.s-modular-responsive-demo {
  max-width: 28rem;
  margin-left: auto;
  margin-right: auto; }
  .s-modular-responsive-demo > div + div {
    margin-top: 0.7rem; }

.s-modular-responsive-demo.is-desktop {
  max-width: 800px; }
  .s-modular-responsive-demo.is-desktop:after {
    display: table;
    clear: both;
    content: ' '; }
  .s-modular-responsive-demo.is-desktop > div {
    float: left;
    width: calc(75% - 0.7rem); }
  .s-modular-responsive-demo.is-desktop > div + div {
    margin-top: 0;
    float: right;
    width: calc(25% - 0.7rem); }

.c-indicator {
  position: relative; }
  .c-indicator::before, .c-indicator::after {
    position: absolute;
    right: 0;
    left: 0;
    content: ''; }
  .c-indicator::before {
    display: block;
    bottom: -1.89rem;
    height: 1.05rem;
    width: 100%;
    border-left: 1px solid #999;
    border-right: 1px solid #999; }
  .c-indicator::after {
    display: block;
    bottom: -1.4rem;
    height: 1px;
    background: #999; }

.s-area-resize {
  margin-left: auto;
  margin-right: auto; }

.s-area-resize.is-mobile {
  max-width: 400px; }
  .s-area-resize.is-mobile .c-demo {
    height: 5.6rem; }
  .s-area-resize.is-mobile .o-mod-demo + .o-mod-demo {
    margin-top: 1.4rem; }
  .s-area-resize.is-mobile .o-mod-demo--content-sidebar .o-content,
  .s-area-resize.is-mobile .o-mod-demo--content-sidebar .o-sidebar {
    float: none;
    display: block;
    width: 100%; }
  .s-area-resize.is-mobile .o-mod-demo--content-sidebar .o-sidebar {
    margin-top: 0.7rem; }
  .s-area-resize.is-mobile .o-mod-demo--three .o-item {
    width: 100%;
    margin-right: 0;
    margin-left: 0; }
  .s-area-resize.is-mobile .o-mod-demo--three .o-item + .o-item {
    margin-top: 0.7rem; }

.resizable {
  resize: both;
  overflow: auto; }

.eq .c-demo {
  min-width: 400px; }

.eq .c-demo[min-width~='500px'] {
  background: rgba(0, 0, 255, 0.25); }
  .eq .c-demo[min-width~='500px']:before {
    content: '500px!'; }

.eq .c-demo[min-width~='800px'] {
  background: rgba(0, 128, 0, 0.25); }
  .eq .c-demo[min-width~='800px']:before {
    content: '800px!'; }

.eq .c-demo[min-height~='600px'] {
  background: rgba(255, 0, 0, 0.25); }
  .eq .c-demo[min-height~='600px']:before {
    content: '600px!'; }

.eq2 {
  min-width: 400px; }
  .eq2 .o-mod-demo + .o-mod-demo {
    margin-top: 1.4rem; }

.eq2[min-width~="700px"] .o-mod-demo {
  margin-top: 0; }

.eq2[min-width~="700px"] .o-content--eq {
  width: calc(75% - 0.7rem);
  float: left; }

.eq2[min-width~="700px"] .o-sidebar--eq {
  width: calc(25% - 0.7rem);
  float: right; }

.eq2[min-width~="700px"] .o-demo--three:after {
  display: table;
  clear: both;
  content: ' '; }

.eq2[min-width~="700px"] .o-demo--three .o-item {
  width: 32.20339%;
  float: left; }
  .eq2[min-width~="700px"] .o-demo--three .o-item:nth-child(3n + 1) {
    margin-left: 0;
    margin-right: -100%;
    clear: both;
    margin-left: 0; }
  .eq2[min-width~="700px"] .o-demo--three .o-item:nth-child(3n + 2) {
    margin-left: 33.89831%;
    margin-right: -100%;
    clear: none; }
  .eq2[min-width~="700px"] .o-demo--three .o-item:nth-child(3n + 3) {
    margin-left: 67.79661%;
    margin-right: -100%;
    clear: none; }

.eq2[min-width~="700px"] .c-demo {
  height: 14rem; }

.hidden {
  visibility: hidden; }

.green {
  display: inline-block;
  border: 5px solid #0fbc66; }

.orange {
  display: inline-block;
  border: 5px solid #FABB00; }

.red {
  display: inline-block;
  border: 5px solid red; }

.c-green {
  color: #0fbc66; }

.c-red {
  color: red; }

.creds {
  position: absolute;
  top: auto;
  left: 0;
  bottom: 8.33333%;
  right: 0;
  text-align: center; }
  .creds span {
    display: block; }

.btn {
  display: inline-block;
  background: #0fbc66;
  color: white;
  padding: 0.5em 0.75em;
  margin: 0.125em 0; }

/*# sourceMappingURL=data:application/json;base64, */
